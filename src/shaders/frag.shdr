#version 330 core

out vec4 FragColor;

uniform vec3 light_pos;
uniform vec3 view_pos;

uniform sampler2D ourTexture;
uniform sampler2D shadowMap;

in vec4 frag_pos_light_space;
in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

void main()
{
  vec3 color = texture(ourTexture, TexCoord).rgb;
  vec3 normal = normalize(Normal);
  vec3 light_color = vec3(1.0);
  
  vec3 ambient = 0.15 * color;

  vec3 light_dir = normalize(light_pos - FragPos);
  float diff = max(dot(light_dir, normal), 0.0);
  vec3 diffuse = diff * light_color;

  vec3 view_dir = normalize(view_pos - FragPos);
  float spec = 0.0;
  vec3 halfway_dir = normalize(light_dir + view_dir);
  spec = pow(max(dot(normal, halfway_dir), 0.0), 64.0);
  vec3 specular = spec * light_color;

  vec3 proj_coords = frag_pos_light_space.xyz / frag_pos_light_space.w;
  proj_coords = proj_coords * 0.5 + 0.5;
  float closest_depth = texture(shadowMap, proj_coords.xy).r;
  float current_depth = proj_coords.z;
  float bias = max(0.05 * (1.0 - dot(normal, light_dir)), 0.005);
  float shadow = current_depth - bias > closest_depth ? 1.0 : 0.0;

  vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * color;
  FragColor = vec4(lighting, 1.0);
}
